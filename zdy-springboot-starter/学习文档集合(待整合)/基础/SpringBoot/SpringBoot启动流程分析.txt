☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆【资源初始化】☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
通过SpringApplication的构造器中初始化资源，如下：
第一步：SpringFactories初始化处理
（1）加载META/spring.factories文件中的自动装配类到Map中：

    Enumeration<URL> urls = (classLoader != null ?
            classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :
            ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));
    result = new LinkedMultiValueMap<>();
    while (urls.hasMoreElements()) {
             URL url = urls.nextElement();
             UrlResource resource = new UrlResource(url);
             Properties properties = PropertiesLoaderUtils.loadProperties(resource);
             for (Map.Entry<?, ?> entry : properties.entrySet()) {
                 String factoryTypeName = ((String) entry.getKey()).trim();
                 for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {
                     result.add(factoryTypeName, factoryImplementationName.trim());
                 }
             }
    }
    return result;
（2）循环读取到的Map内容(类全路径名称)，实例化对象，并保存到List集合中
（3）给List集合排序

第二步：加载监听器Listener资源，并存放在到List<ApplicationListener>中
    如何获取：从第一步的（1）中获取的Map中，通过：
    resultMap.getOrDefault("org.springframework.context.ApplicationListener", Collections.emptyList());
    来返回一个List<ApplicationListener>集合
    再给List集合排序
▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆【继续run方法】☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
初始化资源之后，继续执行SpringApplication中的run方法
第一步：获取SpringApplicationRunListener
       ①SpringApplicationRunListeners listeners=getRunListeners(args);
       ②getRunListeners()方法是通过getSpringFactoriesInstances(SpringApplicationRunListener.class,...)
       ③来获取启动监听器：org.springframework.boot.context.event.EventPublishingRunListener
       ④获取到监听器后，listeners.starting()，来循环执行监听器的starting()方法，需要注意的是，该方法中会继续加载工程中的其他Listener资源，
       ⑤关于加载的其他监听器的资源说明：都是implement ApplicationListener<T>接口的监听器，所以后续靠onApplicationEvent(event)方法来实现每个监听器的任务逻辑
       ⑥最后再invokeLinstener(listener,event);真正执行监听器的逻辑：即：linstener.onApplicationEvent(event);

    大费周章处理监听器的目的：
        加载各个实现了ApplicationListener<T>接口的监听器的功能所需资源

第二步：准备environment环境对象
       ①ConfigureableEnvironment environment=prepareEnvironment(listeners,...)
           环境对象中有写什么内容：
                   activeProfiles
                   defaultProfiles
                   logger
                   propertyResolver
                   propertySources
           经过断点跟踪得知：综上的环境内容起始就是工程启动时的配置文件和内置jar包引用的配置信息。

           那么问题来了：在哪里设置的SpringApplication的类型呢？
                   我们知道prepareEnvironment(listeners,...)中有一句：listeners.environmentPrepared(environment);
                   这是会调用SpringApplicationRunListener中的environmentPrepared(environment),而其中会循环监听器...层层递进调用，
                   最终调用了BootstrapApplicationListener监听器的onApplicationEvent()方法，里面有一句代码设置：
                        SpringApplicationBuilder builder = new SpringApplicationBuilder()
                        				.profiles(environment.getActiveProfiles()).bannerMode(Mode.OFF)
                        				.environment(bootstrapEnvironment)
                        				// Don't use the default properties in this builder
                        				.registerShutdownHook(false).logStartupInfo(false)
                        				.web(WebApplicationType.NONE);//此处设置了NONE类型，后面逻辑会据此获得ApplicationContext的具体实现类：AnnotationConfigApplicationContext


       ②配置忽略Bean信息，configureIgnoreBeanInfo(environment)
           设置忽略信息：System.setProperty("spring.beaninfo.ignore",true);

       ③打印Banner信息，printBanner(environment)
       ④创建ApplicationContext上下文容器对象
            如果当前SpringApplication的类型：
                   SERVLET，则applicationContext=org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext
                   REACTIVE,则applicationContext=org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext
                   NONE,则applicationContext=org.springframework.context.annotation.AnnotationConfigApplicationContext
            断点跟踪知道，springboot默认的启动使用的是下文对象为：AnnotationConfigApplicationContext

            GenericApplicationContext applicationContext=BeanUtils.instantiateClass("org.springframework.context.annotation.AnnotationConfigApplicationContext")
            注重说明一些：
                AnnotationConfigApplicationContext对象中一些内置信息：
                        beanFactory：org.springframework.beans.factory.support.DefaultListableBeanFactory

       ⑤获取异常报警器对象，Collection<SpringBootExceptionReporter> exceptionReporters=getSpringFactoriesInstance(SpringBootExceptionReporter.class,....);
       ⑥prepareContext(...)为上下文对象GenericApplicationContext准备初始环境数据
           prepareContext(applicationContext,environment,listeners,applicationArgument,printBanner);
           具体做了哪些处理呢？
              1、context.setEnvironment(environment);    //设置环境
              2、postProcessApplicationContext(context); //断点跟踪发现未满足条件，不做任何处理
              3、applyInitializers(context);             //获取系统中装配的所有ApplicationContextInitializer的实现子类，然后循环调用initialize(context)完成服务启动前的处理。
              4、listeners.contextPrepared(context);     //SpringApplicationRunListener的contextPrepared切入处理
              5、context.getBeanFactory().registerSingleton("springApplicationArgument",applicationArgument);    //使用beanFactory注入一个单例Bean
              6、listenres.contextLoaded(context);       //SpringApplicationRunListener的contextLoaded切入处理
       ⑦refreshContext(context)刷新上下文对象
            具体做了哪些处理呢？
            内部调用了已和refresh(context)方法，继续深入跟踪分析
              1、对context做了一次断言判断，保证context是否是AbstractApplicationContext的子类，而AnnotationConfigApplicationContext是AbstractApplicationContext的子类。故而断言正确，通过验证
              2、将context转换AbstractApplicationContext类型，并调用refresh()方法，
              下面进入AbstractApplicationContext的refresh()的逻辑分析阶段：
              ★★☾此阶段尤为重要，IOC的生命周期由此展开！！！！☽★★
                (1)、prepareRefresh();ioc容器刷新前，整备context
                     具体看看做了哪些准备：
                        initPropertySources()            //此处默认为空处理，用于替换真实的实例中的initPropertySources()方法,此处为SpringBoot留下的一个切入点，用户IOC刷新前新增处理逻辑。
                        getEnvironment().validateRequiredProperties();//验证环境参数
                (2)、ConfigurableListableBeanFactory beanFactory=obtainFreshBeanFactory();刷新内置的BeanFactory
                     具体看看做了哪些处理：
                        refreshBeanFactory();           //AbstractApplicationContext的refresh的父类GenericApplicationContext中的方法，刷新BeanFactory
                        看下如何刷新的：
                            this.beanFactory().setSerializationId(getId()); //设置序列ID
                        ConfigurableListBeanFactory beanFactory=getBeanFactory();//获取Bean工厂对象，即：DefaultListableBeanFactory
                (3)、prepareBeanFactory(beanFactory); 为BeanFactory在context中使用做准备
                     具体看看做了哪些准备处理：
                        为beanFactory配置context的类加载器
                        为beanFactory配置ApplicationContextAwareProcessor和忽略注入的Aware接口
                        为beanFactory注册依赖项:BeanFactory,ResourceLoader,ApplicatoinEventPublisher,AoolicationContext。。
                        为beanFactory配置处理器:ApplicationListenerDetector
                        .....
                (4)、invokeBeanFactoryPostProcessors(beanFactory),执行BeanFactory的处理器,
                     所有关于@Configuration、@ComponentScan、@PropertySource、@Import、@ImportResource、@Bean注解的生效处理逻辑
                     重点梳理：
                        -->SpringApplication.run()
                        ----->SpringApplication.refresh();
                        -------->AbstractApplicationContext.refresh();
                        ----------->AbstractApplicationContext.invokeBeanFactoryPostProcessor(beanFactory);
                        -------------->PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessor(beanFactory,getBeanFactoryPostProcessors());
                        -------------->PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessor(currentRegistryProcessor,registry);
                        -------------->ConfiguratioinClassPostProcessor.processConfigBeanDefinitions(registryId);
                        ---------------->ConfigurationClassParser.parser(candidates);
                        ------------------>ConfigurationClassParser.doProcessConfigurationClass(....)  @Configuration、@ComponentScan、@PropertySource、@Import、@ImportResource、@Bean注解生效处！！！
                        ......诸如此类........
                     具体看看执行了哪些处理：
                        此处的逻辑很复杂:
                            主要是执行BeanFactoryPostProcessor接口的子接口的BeanDefinitionRegistryPostProcessor的实现子类的方法
                                void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException;
                            执行BeanFactoryPostProcessor的实现子类的postProcessBeanFactory()方法，用于支持开发者在BeanDefinition处理前操作BeanFactory

                (5)、registerBeanPostProcessor(beanFactory);  找到BeanDefinition的前后置处理器，并收集到beanFactory中
                    具体看看执行了哪些处理：
                        这个方法做了很多事，Spring IOC容器初始化中的资源定位、BeanDefinition载入和解析、BeanDefinition注册都是这个方法完成的
                        委托给PostProcessorRegistrationDelegate的invokeBeanFactoryPostProcessors方法执行

                        
                (6)、initMessageSource();国际化语言的支持，暂不研究
                (7)、initApplicationEventMulticaster();初始化事件监听多路广播器
                    具体
                    看看执行了哪些处理：
                        判断beanFactory.getBean("applicationEventMulticaster")是否存在，如果有择不做处理
                        如果不存在,则重新new一个SimpleApplicationEventMulticaster对象，然后通过beanFactory.registerSingleton("applicationEventMulticaster",SimpleApplicationEventMulticaster对象);注册到IOC容器中
                    着重说明一点：
                        后面的各种Listener监听器都会被添加到类似SimpleApplicationEventMulticaster这种对象中。比如第（9）步骤。


                (8)、onRefresh(); 初始化一些特殊的BeanDefinitoin到IOC容器中，默认不实现
                    分析一下：
                        因为当前是AbsractApplicationContext，且当前类中该onRefresh()的定义为：
                            protected void onRefresh(){
                                // For subclasses：do nothing by default
                            }
                        留给其他的ApplicationContext对象来实现做定制化处理。
                (9)、registerListener();检查监听器，并注册它们
                     具体看看执行了哪些处理：
                        1、首先注册静态的指定的监听器
                            for(ApplicationListener<?> listener:getApplicatoinListeners()){
                                ApplicationEventMulticaster appEventMulticaster=getApplicationEventMultcaster();
                                appEventMulticaster.addApplicationListener(listener);
                            }
                        2、其次，注册剩余的未注册过的ApplicationListener监听器
                            String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);
                            for (String listenerBeanName : listenerBeanNames) {
                                ApplicationEventMulticaster appEventMulticaster=getApplicationEventMultcaster();
                                appEventMulticaster.addApplicationListenerBean(listenerBeanName);
                            }
                        3、最后、借用ApplicationEventMulticaster发布早期的application事件
                            Set<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;
                            this.earlyApplicationEvents = null;
                            if (earlyEventsToProcess != null) {
                                for (ApplicationEvent earlyEvent : earlyEventsToProcess) {
                                    getApplicationEventMulticaster().multicastEvent(earlyEvent);
                                }
                            }
                (10)、finishBeanFactoryInitialization(beanFactory);实例化装载所有非懒加载的单例BeanDefinition
                      具体看看执行了哪些处理：
                      1、preInstantiateSingletons(); //实例化所有非单例、非懒加载的BeanDefinition
                         由于比较重要，详细分析一下：
                            该方法属于ConfigurableListableBeanFactory接口
                            真实实现在DefaultListableBeanFactory实现子类中

                          1.1、beanFactory.setTempClassLoader(null); 停用临时的类加载器，放置类型匹配时使用临时类加载器
                          1.2、beanFactory.freezeConfiguratioin();   允许缓存所有Bean定义元数据，此逻辑不希望被改动
                               具体看看执行了哪些处理：
                                    在DefaultListableBeanFactory类中调用一下方法：
                                    public void freezeConfiguration(){
                                        this.configurationFrozen=true;
                                        this.frozenBeanDefinitionNames=StringUtils.toStringArry(this.beanDefinitionNames);
                                    }
                          1.3、beanFactory.preInstantiateSingletons(); 开始实例化所有的非懒加载的单例BeanDefinition
                (11)、finishRefresh(); 服务启动的最后一步
                      具体看看做了哪些处理：
                      1、clearResourceCaches();
                      2、initLifecycleProcessor();
                      3、getLifecycleProcessor().onRefresh();
                      4、publishEvent(new ContextRefreshedEvent(this));
                      5、LiveBeanView.registerApplicationContext(this);
                (12)、restCommonCaches();

       ⑧afterRefresh(context);
            未做任何处理，留待定制化实现子类来实现该方法的逻辑！

       ⑨listeners.started(context);
            具体看看做了哪些处理：
                循环执行SpringApplicationRunListener接口的started(context)方法。

       ⑩callRunners(context,applicationArguments);
            具体看看做了哪些处理：
            按顺序执行：
                     ApplicationRunner接口实现子类生效！
                     CommandLineRunner接口实现子类生效！

















